# 워크플로우 이름
name: CI/CD Pipeline

# main 브랜치에 대한 PR이 "머지되어 closed" 될 때 실행
on:
  pull_request:
    branches:
      - main
    types: [closed]  # PR이 단순히 닫힌 게 아니라 머지된 경우만 타겟

jobs:
  deploy:
    # 머지된 PR일 때만 실행
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest  # GitHub Actions에서 제공하는 Ubuntu 환경에서 실행

    steps:
      # 1. 코드 체크아웃 (해당 커밋 기준의 코드 내려받기)
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. JDK 17 설치 (Spring Boot 프로젝트에 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      # 3. Gradle로 프로젝트 빌드 (jar 생성)
      - name: Build with Gradle
        working-directory: ./backend
        run: |
          chmod +x ./gradlew
          ./gradlew build

      # 4. Docker Hub 로그인 (secrets에 등록된 계정으로)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker image
        working-directory: ./backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/xclone:latest .  # 이미지 빌드
          docker push ${{ secrets.DOCKER_USERNAME }}/xclone:latest       # Docker Hub에 업로드

      # 6. EC2에 SSH 접속 후 배포 수행
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}       # EC2 퍼블릭 IP 또는 도메인
          username: ${{ secrets.EC2_USER }}   # ex: ubuntu, ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}     # EC2 접속용 private key

          # SSH 접속 후 실행할 명령어들
          script: |
            echo "✅ Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/xclone:latest     # 최신 이미지 받기

            echo "🛑 Stopping existing container..."
            docker stop xclone || true                                   # 기존 컨테이너 중지 (없어도 에러 무시)

            echo "🧹 Removing old container..."
            docker rm xclone || true                                     # 기존 컨테이너 삭제 (없어도 에러 무시)

            echo "🚀 Starting new container..."
            docker run -d --name xclone \
              -p 8080:8080 \
              --restart=always \
              ${{ secrets.DOCKER_USERNAME }}/xclone:latest
            # 새 컨테이너 실행 -> # 포트 매핑 (EC2 8080 → 컨테이너 8080) -> # 서버 재시작 시 자동 실행 -> # 최신 이미지로 실행
            # 줄바꿈할 때 \ 뒤에 공백이 있으면 안 됨!